#include <iostream>
#include <vector>
#include <string>
#include <iomanip>
#include <limits>

struct Expense {
    double amount;
    std::string description;
    int id;
    
    // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
    Expense(double amt, const std::string& desc, int identifier) 
        : amount(amt), description(desc), id(identifier) {}
};

class ExpenseTracker {
private:
    std::vector<Expense> expenses;
    int nextId;
    
public:
    ExpenseTracker() : nextId(1) {}
    
    void run() {
        std::cout << "=== üí∞ –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† –†–ê–°–•–û–î–û–í ===\n";
        std::cout << "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç—Ä–µ–∫–µ—Ä —Ä–∞—Å—Ö–æ–¥–æ–≤!\n";
        
        int choice;
        do {
            showMenu();
            choice = getChoice();
            
            switch (choice) {
                case 1:
                    addExpense();
                    break;
                case 2:
                    showExpenses();
                    break;
                case 3:
                    showTotal();
                    break;
                case 4:
                    deleteExpense();
                    break;
                case 5:
                    showStatistics();
                    break;
                case 6:
                    std::cout << "\n–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ! –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã\n";
                    break;
                default:
                    std::cout << "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n";
            }
            
            if (choice != 6) {
                std::cout << "\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...";
                std::cin.ignore();
                std::cin.get();
                std::cout << "\n";
            }
            
        } while (choice != 6);
    }
    
private:
    void showMenu() {
        std::cout << "--- –ú–ï–ù–Æ ---\n";
        std::cout << "1. ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥\n";
        std::cout << "2. üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã\n";
        std::cout << "3. üí∞ –û–±—â–∞—è —Å—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤\n";
        std::cout << "4. üóëÔ∏è  –£–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Ö–æ–¥\n";
        std::cout << "5. üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n";
        std::cout << "6. ‚ùå –í—ã—Ö–æ–¥\n";
        std::cout << "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-6): ";
    }
    
    int getChoice() {
        int choice;
        while (!(std::cin >> choice)) {
            std::cout << "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6: ";
            std::cin.clear();
            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
        }
        std::cin.ignore(); // –û—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞
        return choice;
    }
    
    void addExpense() {
        double amount;
        std::string description;
        
        std::cout << "\n--- –î–û–ë–ê–í–õ–ï–ù–ò–ï –†–ê–°–•–û–î–ê ---\n";
        
        // –í–≤–æ–¥ —Å—É–º–º—ã
        std::cout << "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞: ";
        while (!(std::cin >> amount) || amount < 0) {
            std::cout << "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–±–æ–ª—å—à–µ 0): ";
            std::cin.clear();
            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
        }
        std::cin.ignore(); // –û—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞
        
        // –í–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è
        std::cout << "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞: ";
        std::getline(std::cin, description);
        
        if (description.empty()) {
            description = "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è";
        }
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞
        expenses.emplace_back(amount, description, nextId++);
        
        std::cout << "‚úÖ –†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n";
        std::cout << "üí≥ –°—É–º–º–∞: " << std::fixed << std::setprecision(2) << amount << " —Ä—É–±.\n";
        std::cout << "üìù –û–ø–∏—Å–∞–Ω–∏–µ: " << description << "\n";
    }
    
    void showExpenses() {
        std::cout << "\n--- –°–ü–ò–°–û–ö –†–ê–°–•–û–î–û–í ---\n";
        
        if (expenses.empty()) {
            std::cout << "üì≠ –°–ø–∏—Å–æ–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Ä–∞—Å—Ö–æ–¥!\n";
            return;
        }
        
        std::cout << std::left << std::setw(5) << "ID" 
                  << std::setw(12) << "–°—É–º–º–∞" 
                  << "–û–ø–∏—Å–∞–Ω–∏–µ\n";
        std::cout << std::string(50, '-') << "\n";
        
        for (const auto& expense : expenses) {
            std::cout << std::left << std::setw(5) << expense.id
                      << std::setw(12) << std::fixed << std::setprecision(2) 
                      << (std::to_string(expense.amount) + " —Ä—É–±.")
                      << expense.description << "\n";
        }
    }
    
    void showTotal() {
        std::cout << "\n--- –û–ë–©–ê–Ø –°–£–ú–ú–ê –†–ê–°–•–û–î–û–í ---\n";
        
        if (expenses.empty()) {
            std::cout << "üì≠ –ù–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞.\n";
            return;
        }
        
        double total = 0.0;
        for (const auto& expense : expenses) {
            total += expense.amount;
        }
        
        std::cout << "üí∞ –û–±—â–∞—è —Å—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤: " << std::fixed << std::setprecision(2) 
                  << total << " —Ä—É–±.\n";
        std::cout << "üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: " << expenses.size() << "\n";
        
        if (!expenses.empty()) {
            double average = total / expenses.size();
            std::cout << "üìà –°—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥: " << std::fixed << std::setprecision(2) 
                      << average << " —Ä—É–±.\n";
        }
    }
    
    void deleteExpense() {
        std::cout << "\n--- –£–î–ê–õ–ï–ù–ò–ï –†–ê–°–•–û–î–ê ---\n";
        
        if (expenses.empty()) {
            std::cout << "üì≠ –ù–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.\n";
            return;
        }
        
        showExpenses();
        
        int id;
        std::cout << "\n–í–≤–µ–¥–∏—Ç–µ ID —Ä–∞—Å—Ö–æ–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ";
        while (!(std::cin >> id)) {
            std::cout << "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID: ";
            std::cin.clear();
            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
        }
        
        // –ü–æ–∏—Å–∫ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞
        auto it = std::find_if(expenses.begin(), expenses.end(),
                              [id](const Expense& expense) {
                                  return expense.id == id;
                              });
        
        if (it != expenses.end()) {
            std::cout << "üóëÔ∏è  –£–¥–∞–ª–µ–Ω —Ä–∞—Å—Ö–æ–¥: " << it->description 
                      << " (" << std::fixed << std::setprecision(2) 
                      << it->amount << " —Ä—É–±.)\n";
            expenses.erase(it);
        } else {
            std::cout << "‚ùå –†–∞—Å—Ö–æ–¥ —Å ID " << id << " –Ω–µ –Ω–∞–π–¥–µ–Ω.\n";
        }
    }
    
    void showStatistics() {
        std::cout << "\n--- üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ê–°–•–û–î–û–í ---\n";
        
        if (expenses.empty()) {
            std::cout << "üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n";
            return;
        }
        
        double total = 0.0;
        double maxExpense = expenses[0].amount;
        double minExpense = expenses[0].amount;
        std::string maxDescription = expenses[0].description;
        std::string minDescription = expenses[0].description;
        
        for (const auto& expense : expenses) {
            total += expense.amount;
            
            if (expense.amount > maxExpense) {
                maxExpense = expense.amount;
                maxDescription = expense.description;
            }
            
            if (expense.amount < minExpense) {
                minExpense = expense.amount;
                minDescription = expense.description;
            }
        }
        
        double average = total / expenses.size();
        
        std::cout << "üìã –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: " << expenses.size() << "\n";
        std::cout << "üí∞ –û–±—â–∞—è —Å—É–º–º–∞: " << std::fixed << std::setprecision(2) 
                  << total << " —Ä—É–±.\n";
        std::cout << "üìà –°—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥: " << std::fixed << std::setprecision(2) 
                  << average << " —Ä—É–±.\n";
        std::cout << "‚¨ÜÔ∏è  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞—Å—Ö–æ–¥: " << std::fixed << std::setprecision(2) 
                  << maxExpense << " —Ä—É–±. (" << maxDescription << ")\n";
        std::cout << "‚¨áÔ∏è  –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞—Å—Ö–æ–¥: " << std::fixed << std::setprecision(2) 
                  << minExpense << " —Ä—É–±. (" << minDescription << ")\n";
        
        // –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞—Ç
        if (total > 10000) {
            std::cout << "‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: –±–æ–ª—å—à–∏–µ —Ç—Ä–∞—Ç—ã –∑–∞ –ø–µ—Ä–∏–æ–¥!\n";
        } else if (total < 1000) {
            std::cout << "üëç –û—Ç–ª–∏—á–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å —Ä–∞—Å—Ö–æ–¥–æ–≤!\n";
        } else {
            std::cout << "üí° –£–º–µ—Ä–µ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã.\n";
        }
    }
};

int main() {
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–æ–∫–∞–ª–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    setlocale(LC_ALL, "Russian");
    
    ExpenseTracker tracker;
    tracker.run();
    
    return 0;
}
